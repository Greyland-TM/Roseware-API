version: '3.8'
services:
  # PostgreSQL Database Service
  postgres:
    container_name: postgres
    env_file:
      - .env
    image: postgres:latest
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    restart: always
    volumes:
      - db:/var/lib/postgresql/data/

  # pgAdmin Web Interface for PostgreSQL
  pgadmin:
    env_file:
      - .env
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_MAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PW}
    ports:
      - "5050:80"  # Map port 5050 on the host to port 80 in the container
    restart: always

  # RabbitMQ Message Broker
  rabbitmq:
    hostname: 'rabbitmq-dev'
    image: rabbitmq:management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672     # RabbitMQ default AMQP port
      - 15672:15672   # RabbitMQ management web interface port
    volumes:
      - rabbitmq:/var/lib/rabbitmq/

  # Celery Worker Service
  celery-worker:
    container_name: "celery-worker"
    build: .  # Build the Docker image from the current directory
    command: [ "celery", "-A", "roseware", "worker" ]
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - postgres

  # Celery Beat Scheduler Service
  celery-beat:
    container_name: "celery-beat"
    build: .  # Build the Docker image from the current directory
    command:
      [
        "celery",
        "-A",
        "roseware",
        "worker",
        "-B",
        "-l",
        "ERROR"
      ]
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - postgres

  # Django Application Service
  django:
    container_name: "django"
    env_file:
      - .env
    build: .  # Build the Docker image from the current directory
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    volumes:
      - .:/app  # Mount the current directory as /app inside the container
    ports:
      - 8000:8000  # Map port 8000 on the host to port 8000 in the container
    depends_on:
      - postgres
      - rabbitmq

# Define named volumes for persistent data storage
volumes:
  db:       # PostgreSQL data volume
  rabbitmq: # RabbitMQ data volume
